import {Response, Request} from "express";

const onUpdateReceived = async (req: Request, res: Response) => {
  const isTelegramMessage = req.body &&
    req.body.message &&
    req.body.message.chat &&
    req.body.message.chat.id &&
    req.body.message.from &&
    req.body.message.from.first_name;

  if (isTelegramMessage) {
    const chatId = req.body.message.chat.id;
    const firstName = req.body.message.from.first_name;

    if (req.body.message.text === "/start") {
      const startMessage =
        `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ${firstName}üëãüèΩ\n\n–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è` +
        " —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–∫—Å–∞–º–∏ —Å –æ–¥–µ–∂–¥–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞." +
        "–í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n" +
        "1. **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å\uD83D\uDC40**:" +
        " –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏" +
        " –±–æ–∫—Å–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö –≥–æ—Ä–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É \n" +
        "2. **–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\uD83D\uDD14**:" +
        " —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π " +
        "—Ç–æ –∏–∑ –±–æ–∫—Å–æ–≤ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è.\n";

      const replyKeyboard = {
        keyboard: [
          [
            {
              text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å \uD83D\uDC40",
            },
          ],
          [
            {
              text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \uD83D\uDD14",
            },
          ],
        ],
        resize_keyboard: true,
      };

      const startResponseMessage = {
        method: "sendMessage",
        chat_id: chatId,
        reply_markup: replyKeyboard,
        text: startMessage,
        parse_mode: "Markdown",
      };

      return res.status(200).send(startResponseMessage);
    } else if (req.body.message.text ===
      "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å \uD83D\uDC40") {
      const fullnessResponseMessage = viewFullness(chatId);

      return res.status(200).send(fullnessResponseMessage);
    } else if (req.body.message.text ===
      "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \uD83D\uDD14") {
      const subscribeResponseMessage = subscribeForNotifications(chatId);

      return res.status(200).send(subscribeResponseMessage);
    } else {
      return res.status(200).send(handleUndefinedCommand(chatId));
    }
  }
  return res.status(200).send({status: "not a telegram message"});
};

const viewFullness = (chatId: number) => {
  const occupancyMessage = "–¢–µ–∫—É—â–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –±–æ–∫—Å–æ–≤: ...";
  return {
    method: "sendMessage",
    chat_id: chatId,
    text: occupancyMessage,
    parse_mode: "Markdown",
  };
};

const subscribeForNotifications = (chatId: number) => {
  const subscribeMessage =
    "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ";
  return {
    method: "sendMessage",
    chat_id: chatId,
    text: subscribeMessage,
    parse_mode: "Markdown",
  };
};

const handleUndefinedCommand = (chatId: number) => {
  const errorMessage = `–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.`;
  return {
    method: "sendMessage",
    chat_id: chatId,
    text: errorMessage,
    parse_mode: "Markdown",
  };
};


export {onUpdateReceived};
