import {Request, Response} from "express";
import {logger} from "firebase-functions";
import {Message} from "node-telegram-bot-api";
import {db} from "./config/firebase";
import {getLastReports} from "./reportController";
import {FullnessItem} from "./dto/reportDto";
import User from "./model/user";
import {firestore} from "firebase-admin";
import DocumentReference = firestore.DocumentReference;
import DocumentData = firestore.DocumentData;

const onUpdateReceived = async (req: Request, res: Response) => {
  const isTelegramMessage = req.body &&
    req.body.message &&
    req.body.message.chat &&
    req.body.message.chat.id &&
    req.body.message.from &&
    req.body.message.from.first_name;

  if (isTelegramMessage) {
    const chatId = req.body.message.chat.id;
    const message = req.body.message;
    logger.debug(chatId, "Test");
    const chatRef = await db.collection("chats").doc(chatId.toString());
    const chat = await chatRef.get();

    if (!chat.exists) {
      logger.debug("login");
      const startResponseMessage =
        await handleLogin(message, chatRef);
      logger.debug("test", startResponseMessage);
      return res.status(200).send(startResponseMessage);
    }
    const state = chat.data()?.state;
    logger.debug(state, "state");
    if (state == "waiting number") {
      const startResponseMessage =
        await processPhoneNumber(message, chatRef);
      logger.debug("test", startResponseMessage);
      return res.status(200).send(startResponseMessage);
    } else if (state == "authorized") {
      if (req.body.message.text ===
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å \uD83D\uDC40") {
        const fullnessResponseMessage = await viewFullness(chatId);

        return res.status(200).send(fullnessResponseMessage);
      } else if (req.body.message.text ===
        "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \uD83D\uDD14") {
        const phoneNumber: string = chat.data()?.phoneNumber;
        const subscribeResponseMessage =
          await subscribeForNotifications(req.body.message, phoneNumber);

        return res.status(200).send(subscribeResponseMessage);
      } else if (req.body.message.text ===
        "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîï") {
        const phoneNumber: string = chat.data()?.phoneNumber;
        const subscribeResponseMessage =
          await unsubscribeForNotifications(req.body.message, phoneNumber);

        return res.status(200).send(subscribeResponseMessage);
      } else {
        return res.status(200).send(handleUndefinedCommand(chatId));
      }
    }
  }
  return res.status(200).send({status: "not a telegram message"});
};

const getFullnessColorEmoji = (percent: number): string => {
  let color = "";

  if (percent >= 70) {
    for (let i = 0; i < percent / 10; i++) {
      color += "üü•";
    }
  } else if (percent >= 40) {
    for (let i = 0; i < percent / 10; i++) {
      color += "üü®";
    }
  } else if (percent >= 10) {
    for (let i = 0; i < percent / 10; i++) {
      color += "üü©";
    }
  } else {
    color += "üü©";
  }

  for (let i = 0; i < 10 - percent / 10; i++) {
    color += "‚¨úÔ∏è";
  }

  return color.trim();
};

const getFormattedResponseMessage = (list: FullnessItem[]) => {
  let responseMessage = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç\n";

  list.forEach((item, index: number) => {
    responseMessage += `${index + 1}. ${item.name}\n`;
    responseMessage += getFullnessColorEmoji(item.fullness);
    responseMessage += ` ${item.fullness}%\n`;
  });

  return responseMessage;
};

const viewFullness = async (chatId: number) => {
  const fullnessReport: FullnessItem[] = await getLastReports();
  logger.debug("FULLNESS LOG", fullnessReport);
  const responseMessage = getFormattedResponseMessage(fullnessReport);

  logger.info("RESPONSE MESSAGE", responseMessage);
  return {
    method: "sendMessage",
    chat_id: chatId,
    text: responseMessage,
    parse_mode: "Markdown",
  };
};

const subscribeForNotifications = async (
  message: Message,
  phoneNumber: string) => {
  const subscribeMessage =
    "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ–∫—Å–æ–≤";
  const userRef = db.collection("users").doc(phoneNumber);
  await userRef.update({receiveNotifications: true});

  const replyKeyboard = {
    keyboard: [
      [
        {
          text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å \uD83D\uDC40",
        },
      ],
      [
        {
          text: "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîï",
        },
      ],
    ],
    resize_keyboard: true,
  };
  return {
    method: "sendMessage",
    chat_id: message.chat.id,
    reply_markup: replyKeyboard,
    text: subscribeMessage,
    parse_mode: "Markdown",
  };
};

const unsubscribeForNotifications = async (
  message: Message,
  phoneNumber: string) => {
  const subscribeMessage =
    "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üîï";
  const userRef = db.collection("users").doc(phoneNumber);
  await userRef.update({receiveNotifications: false});
  const replyKeyboard = {
    keyboard: [
      [
        {
          text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å \uD83D\uDC40",
        },
      ],
      [
        {
          text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \uD83D\uDD14",
        },
      ],
    ],
    resize_keyboard: true,
  };
  return {
    method: "sendMessage",
    chat_id: message.chat.id,
    reply_markup: replyKeyboard,
    text: subscribeMessage,
    parse_mode: "Markdown",
  };
};

const validatePhoneNumber = (phoneNumber: string) => {
  const pattern = /^\+\d{11}$/;

  return pattern.test(phoneNumber);
};

const handleLogin = async (
  message: Message,
  chatRef: DocumentReference<DocumentData>
) => {
  const enterNumberMessage =
    "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì≤ \n –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: +77657654321";

  await chatRef.set({state: "waiting number"});

  return {
    method: "sendMessage",
    chat_id: message.chat.id,
    text: enterNumberMessage,
    parse_mode: "Markdown",
  };
};

const processPhoneNumber = async (
  message: Message,
  chatRef: DocumentReference<DocumentData>
) => {
  const phoneNumber: string | undefined = message.text;

  if (phoneNumber && !validatePhoneNumber(phoneNumber)) {
    return {
      method: "sendMessage",
      chat_id: message.chat.id,
      text: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞",
      parse_mode: "Markdown",
    };
  }

  const userRef = await db.collection("users")
    .doc(<string>phoneNumber?.substring(1));

  const user = await userRef.get();
  if (!user.exists) {
    return {
      method: "sendMessage",
      chat_id: message.chat.id,
      text: "–í—ã –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
      parse_mode: "Markdown",
    };
  }

  const userData: User = user.data() as User;
  const updatedUser = {
    ...userData,
    telegramUsername: message.chat.username,
    chatId: message.chat.id,
  };

  await userRef.set(updatedUser);

  const startMessage =
    `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ${userData.name}üëãüèΩ\n\n–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è` +
    " —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–∫—Å–∞–º–∏ —Å –æ–¥–µ–∂–¥–æ–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞." +
    "–í–æ—Ç –º–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n" +
    "1. **–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å\uD83D\uDC40**:" +
    " –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏" +
    " –±–æ–∫—Å–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö –≥–æ—Ä–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É \n" +
    "2. **–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\uD83D\uDD14**:" +
    " —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω—è –∫–æ–≥–¥–∞ –∫–∞–∫–æ–π " +
    "—Ç–æ –∏–∑ –±–æ–∫—Å–æ–≤ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è.\n";

  const replyKeyboard = {
    keyboard: [
      [
        {
          text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å \uD83D\uDC40",
        },
      ],
      [
        {
          text: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \uD83D\uDD14",
        },
      ],
    ],
    resize_keyboard: true,
  };
  await chatRef.set(
    {
      state: "authorized",
      phoneNumber: phoneNumber?.substring(1),
    }
  );

  return {
    method: "sendMessage",
    chat_id: message.chat.id,
    reply_markup: replyKeyboard,
    text: startMessage,
    parse_mode: "Markdown",
  };
};

const handleUndefinedCommand = (chatId: number) => {
  const errorMessage = `–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
  –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.`;
  return {
    method: "sendMessage",
    chat_id: chatId,
    text: errorMessage,
    parse_mode: "Markdown",
  };
};

export {onUpdateReceived};
